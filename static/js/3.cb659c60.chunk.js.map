{"version":3,"sources":["components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","React","Component","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","statusBar","onClick","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","type","ProfileInfo","profile","profileInfo","image","src","photos","large","alt","descriptionBlock","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","conacts","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Preloader","Post","item","img","postBlock","message","likeBlock","like","likes","MyPosts","memo","console","log","postsElements","myPosts","map","element","key","id","AddNewPostRedux","onSubmit","values","addPost","newPostText","posts","maxLength20","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","postData","dispatch","addPostActionCreator","Profile","content","ProfileContainer","userId","this","match","params","myUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.cb659c60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusBar\":\"ProfileStatus_statusBar__1W--7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__3JGKj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3YEKi\",\"image\":\"ProfileInfo_image__1JeL5\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1zCqY\",\"conacts\":\"ProfileInfo_conacts__1kWR-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__2euUE\",\"posts\":\"MyPosts_posts__3JIsA\",\"inputMessage\":\"MyPosts_inputMessage__1tKp6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1VVus\",\"img\":\"Post_img__3OvcL\",\"like\":\"Post_like__1duyf\",\"postBlock\":\"Post_postBlock__1VfH4\",\"likeBlock\":\"Post_likeBlock__2D8Zp\"};","import React from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        statusText: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({ editMode: true })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({ editMode: false });\r\n        this.props.updateStatus(this.state.statusText);\r\n    }\r\n    onChangeStatus = (event) => {\r\n        this.setState({ statusText: event.currentTarget.value })\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({ status: this.props.status })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={s.statusBar}>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <p onClick={this.activateEditMode}>{this.props.status || \"no status now\"}</p>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input autoFocus={true} onBlur={this.deactivateEditMode} onChange={this.onChangeStatus} type=\"text\" value={this.state.statusText} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\nexport default ProfileStatus;","import React, { useState, useEffect } from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onChangeStatus = (event) => {\r\n        setStatus(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className={s.statusBar}>\r\n            {!editMode &&\r\n                <div>\r\n                    <p onClick={activateEditMode}>{props.status || \"no status now\"}</p>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={deactivateEditMode} onChange={onChangeStatus} type=\"text\" value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img\r\n                    className={s.image}\r\n                    src={profile.photos.large}\r\n                    alt=\"ava\"\r\n                />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <p>Name: {profile.fullName}</p>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                <p>Обо мне: {profile.aboutMe}</p>\r\n                <p>Ищу работу: {profile.lookingForAJob === true ? \"Да\" : \"Нет\"}</p>\r\n                <p>Какую работу ищу: {profile.lookingForAJobDescription}</p>\r\n            </div>\r\n            <div className={s.conacts}>\r\n                <h4>Мои контакты</h4>\r\n                {profile.contacts.facebook && <p>Facebook: {profile.contacts.facebook}</p>}\r\n                {profile.contacts.website && <p>Website: {profile.contacts.website}</p>}\r\n                {profile.contacts.vk && <p>VK: {profile.contacts.vk}</p>}\r\n                {profile.contacts.twitter && <p>Twitter: {profile.contacts.twitter}</p>}\r\n                {profile.contacts.instagram && <p>Instagram: {profile.contacts.instagram}</p>}\r\n                {profile.contacts.youtube && <p>Youtube: {profile.contacts.youtube}</p>}\r\n                {profile.contacts.github && <p>Github: {profile.contacts.github}</p>}\r\n                {profile.contacts.mainLink && <p>MainLink: {profile.contacts.mainLink}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = props => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                className={s.img}\r\n                src=\"https://habrastorage.org/webt/5c/e7/b6/5ce7b646a2494426597912.jpeg\"\r\n                alt=\"avatar\"\r\n            />\r\n            <div className={s.postBlock}>\r\n                <p>{props.message}</p>\r\n                <div className={s.likeBlock}>\r\n                    <img\r\n                        className={s.like}\r\n                        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/13/Facebook_like_thumb.png/700px-Facebook_like_thumb.png\"\r\n                        alt=\"\"\r\n                    />\r\n                    <span>{props.likes}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators'\r\nimport { TextArea } from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    // let postData = props.myPosts;\r\n    console.log(\"RENDER!!!\");\r\n    let postsElements = props.myPosts.map(element => (\r\n        <Post\r\n            message={element.message}\r\n            key={element.id}\r\n            likes={element.likes}\r\n        />\r\n    ));\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.postBlock}>\r\n                <h4>My posts</h4>\r\n                <AddNewPostRedux onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nlet maxLength20 = maxLengthCreator(20);\r\n\r\nconst MyPostsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name='newPostText' placeholder=\"Enter new post...\"          //используем TexArea созданную вручную, с настроенной валидацией\r\n                    validate={[required, maxLength20]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst AddNewPostRedux = reduxForm({ form: \"profilePostForm\" })(MyPostsForm);\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        myPosts: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = props => {\r\n    return (\r\n        <main className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </main>\r\n    );\r\n};\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport Axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { usersAPI } from '../../api/api';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.myUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'} />  //редирект если не залогинены\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n        );\r\n    }\r\n};\r\nlet mapStateToProps = (state => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    myUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n}));\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer); // Hight Order Component (HOC)\r\n\r\n// let withUrlDataProfileContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default connect(mapStateToProps, { getUserProfile })(withUrlDataProfileContainerComponent);\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}