{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Messages/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","element","key","messagesElements","messagesData","Fragment","dialogs","dialogItems","messages","values","sendMessage","newMessageText","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,8FCU9JC,EAPI,SAAAC,GACf,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAKN,EAAMO,QCDzCC,EAHC,SAAAR,GACZ,OAAO,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMS,U,kCC0CzCC,EAAeC,YAAiB,KAe9BC,EAAsBC,YAAU,CAAEC,KAAM,yBAAlBD,EAdL,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAAiBa,YAAY,sBAC1DC,SAAU,CAACC,IAAUZ,MAE7B,6BACI,6CAQDa,EArDC,SAAAvB,GACZ,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAC,GAAO,OAC/C,kBAAC,EAAD,CAAYtB,KAAMsB,EAAQtB,KAAMuB,IAAKD,EAAQvB,GAAIA,GAAIuB,EAAQvB,QAG7DyB,EAAmBP,EAAMQ,aAAaJ,KAAI,SAAAC,GAC1C,OAAO,kBAAC,EAAD,CAASpB,QAASoB,EAAQpB,QAASqB,IAAKD,EAAQvB,GAAIA,GAAIuB,EAAQvB,QAU3E,OACI,kBAAC,IAAM2B,SAAP,KACI,yBAAKhC,UAAWC,IAAEgC,SACd,yBAAKjC,UAAWC,IAAEiC,aACbT,GAEL,yBAAKzB,UAAWC,IAAEkC,UACd,6BACKL,GAEL,kBAACnB,EAAD,CAAqBG,SAbhB,SAACsB,GAClBrC,EAAMsC,YAAYD,EAAOE,uB,wBCFlBC,sBACXC,aAjBkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACiB,GACtB,MAAO,CACHJ,YAAa,SAACC,GAAqBG,EAASC,YAAmBJ,SAUnEK,IAFWJ,CAEOjB","file":"static/js/4.64f641b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BKcAO\",\"dialogItems\":\"Dialogs_dialogItems__yJbuh\",\"dialog\":\"Dialogs_dialog__3W262\",\"active\":\"Dialogs_active__9QasW\",\"messages\":\"Dialogs_messages__3qO3Z\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = props => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = props => {\r\n    return <div className={s.message}>{props.message}</div>;\r\n};\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from './Messages/Message';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { TextArea } from '../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = props => {\r\n    let state = props.dialogsPage;\r\n    // debugger;\r\n    let dialogsElements = state.dialogsData.map(element => (\r\n        <DialogItem name={element.name} key={element.id} id={element.id} />\r\n    ));\r\n\r\n    let messagesElements = state.messagesData.map(element => {\r\n        return <Message message={element.message} key={element.id} id={element.id} />;\r\n    });\r\n    // let newMessageText = state.newMessageText;\r\n    // let messegeInput = React.createRef();\r\n\r\n    // if (!props.isAuth) return <Redirect to={'/login'} />;          //редирект если мы не залогинены\r\n\r\n    let addNewMessages = (values) => {\r\n        props.sendMessage(values.newMessageText);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>\r\n                        {messagesElements}\r\n                    </div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessages} />\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nlet maxLength100 = maxLengthCreator(100);\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name='newMessageText' placeholder=\"Enter your messages\"\r\n                    validate={[required, maxLength100]} />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessagesForm\" })(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageText) => { dispatch(sendMessageCreator(newMessageText)); }\r\n    }\r\n}\r\n// compose(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);       //Hight Order Component (HOC)\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}